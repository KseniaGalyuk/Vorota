//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff"),
			url("../fonts/#{$file_name}.ttf") format("ttf"), url("../fonts/#{$file_name}.eot") format("embedded-opentype");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}
//Подключение иконочного шрифта
@mixin iconsFont($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: block;
		src: url("../fonts/#{$file_name}.svg") format("svg"), url("../fonts/#{$file_name}.woff") format("woff"),
			url("../fonts/#{$file_name}.eot") format("embedded-opentype"),
			url("../fonts/#{$file_name}.ttf") format("truetype");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}
//Адаптивное свойство
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type==1 {
		//Только если меньше контейнера (когда не надо растягивать контент на весь, даже очень большой, экран)
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
		}
	} @else if $type==2 {
		//Только если больше контейнера
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}

//Адаптивное свойство в rem
@mixin adaptiv-value-rem($property, $startSize, $minSize, $type) {
	$addSize: $startSize - $minSize;
	@if $type==1 {
		//Только если меньше контейнера (когда не надо растягивать контент на весь, даже очень большой, экран)
		#{$property}: $startSize + px;
		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc((#{$minSize} + #{$addSize} * ((100vw - 20rem) / #{$maxWidthContainer - 320})) / 16);
		}
	} @else if $type==2 {
		//Только если больше контейнера
		#{$property}: $startSize + px;
		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
		}
	} @else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
	}
}
//Адаптивное свойство до (Когда минимальная ширина применения не 320px, а другая)
@mixin adaptiv-value-to($property, $startSize, $minSize, $minWidth) {
	$addSize: $startSize - $minSize;
	//#{$property}: $minSize + px;
	@media (min-width: #{$minWidth + px}) {
		#{$property}: calc(
			#{$minSize + px} + #{$addSize} * (((100vw - #{$minWidth + px})) / ((#{$maxWidth - $minWidth})))
		);
	}
}
